{
  "name": "fashion-search",
  "endpoints": [
    {
      "envSelection": {
        "envMode": "INHERIT"
      },
      "testQueries": [
        {
          "name": "Sample Query",
          "q": {
            "query": "blue dress with yellow flowers"
          }
        }
      ],
      "inputFolderRefs": [
        {
          "ref": "UKTXMoc0"
        }
      ],
      "userFunctionName": "api_py_function",
      "code": "import dataiku\nimport inference\n\n\nmodel_path \u003d folders[0]\nmodel \u003d inference.model_fn(model_path)\n\n\n# entry point\ndef api_py_function(query):\n    result \u003d inference.predict_fn(query, model)\n    return result\n",
      "id": "encoder",
      "type": "PY_FUNCTION"
    },
    {
      "envSelection": {
        "envMode": "INHERIT"
      },
      "testQueries": [
        {
          "name": "blue dress",
          "q": {
            "query": "white and blue dress",
            "k": 3
          }
        }
      ],
      "inputFolderRefs": [
        {
          "ref": "UKTXMoc0"
        }
      ],
      "userFunctionName": "api_py_function",
      "code": "import dataiku\nimport inference\nfrom elasticsearch import Elasticsearch\n\nmodel_path \u003d folders[0]\nmodel \u003d inference.model_fn(model_path)\n\nes \u003d Elasticsearch()\n\ndef api_py_function(query, k):\n    feature_vector \u003d inference.predict_fn(query, model)\n    search_query \u003d {\n        \"size\": k,\n        \"query\": {\n            \"script_score\": {\n                \"query\": {\n                    \"match_all\": {}\n                },\n                \"script\": {\n                    \"source\": \"cosineSimilarity(params.queryVector, \u0027zalando_nlu_vector\u0027) + 1.0\",\n                    \"params\": {\n                        \"queryVector\": feature_vector\n                    }\n                }\n            }\n        }\n    }\n    response \u003d es.search(index\u003d\u0027idx_zalando\u0027, **search_query)\n    results \u003d [r[\u0027_source\u0027][\u0027image\u0027] for r in response[\u0027hits\u0027][\u0027hits\u0027]]\n    image_urls \u003d [f\u0027http://localhost:11500/dip/api/managedfolder/preview-image?projectKey\u003dFASHIONSEARCH\u0026odbId\u003dwQPWIBlM\u0026itemPath\u003d{i}\u0026contentType\u003dimage/jpeg\u0027 for i in results]\n      \n    return {\u0027images\u0027: image_urls}",
      "id": "semantic_search",
      "type": "PY_FUNCTION"
    },
    {
      "envSelection": {
        "envMode": "INHERIT"
      },
      "testQueries": [],
      "inputFolderRefs": [],
      "userFunctionName": "api_py_function",
      "code": "\n# Insert here initialization code\n\n# This function is the entry point for your Python function API\n# You can call this function with passing \"param1\", \"param2\",\n# \"param3\" as arguments to the API call\n# (see REST API documentation)\ndef api_py_function(param1, param2, param3):\n    return param1 + param2 * param3\n",
      "id": "es_match",
      "type": "PY_FUNCTION"
    }
  ],
  "publicAccess": true,
  "authRealm": {
    "queryKeys": []
  },
  "tags": [],
  "customFields": {},
  "checklists": {
    "checklists": []
  }
}